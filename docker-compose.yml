version: '3.8'

services:
  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9093:9093"
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9094"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9094,EXTERNAL://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    restart: always

  minio:
    image: minio/minio
    container_name: minio_kafka
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env.docker
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data

  elasticsearch:
    image: elasticsearch:8.18.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped

  fastapi:
    build:
      context: ./app
    env_file:
      - ./app/.env
      - .env.docker
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs

  react:
    build:
      context: ./front
      dockerfile: Dockerfile
      args:
        REACT_APP_API: "http://127.0.0.1:8000/api"
    ports:
      - "80:80"
    restart: always

volumes:
  minio_data:
  esdata: